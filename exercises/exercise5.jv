pipeline StopsPipeline {
    GTFSDataDownloader
        -> GTFSZipHandler 
        -> StopsFileSelector
        -> StopsTextParser
        -> StopsCSVParser
        -> StopsTableMapper
        -> StopsDataWriter;

    block GTFSDataDownloader oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    block GTFSZipHandler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block StopsFileSelector oftype FilePicker {
        path: "/stops.txt";
    }

    // Using actually no encoding does help to obtain the german umlauts correctly
    block StopsTextParser oftype TextFileInterpreter {}

    block StopsCSVParser oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    // Defining custom data types
    constraint ZoneConstraint on integer: value == 1925;

    valuetype ZoneValue oftype integer {
        constraints: [ZoneConstraint];
    }

    // Upper and lower bounds are included by default
    constraint LatLongConstraint oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
    }

    valuetype LatLongValue oftype decimal {
        constraints: [LatLongConstraint];
    }

    block StopsTableMapper oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype LatLongValue,
            "stop_lon" oftype LatLongValue,
            "zone_id" oftype ZoneValue,
        ];
    }

    block StopsDataWriter oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}
